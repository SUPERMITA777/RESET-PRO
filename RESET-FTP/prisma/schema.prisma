generator client {
  provider = "prisma-client-js"
  previewFeatures = []
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Treatment {
  id             Int            @id @default(autoincrement())
  name           String
  description    String
  duration       Int
  price          Float
  isSubtreatment Boolean        @default(false)
  parentId       Int?
  alwaysAvailable Boolean       @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  appointments   Appointment[]
  availability   Availability[]
  parent         Treatment?     @relation("SubTreatments", fields: [parentId], references: [id])
  subTreatments  Treatment[]    @relation("SubTreatments")
  saleItems      SaleItem[]
}

model Availability {
  id          Int       @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  startTime   String
  endTime     String
  box         String
  treatmentId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  treatment   Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)
}

model Professional {
  id           Int                       @id @default(autoincrement())
  name         String
  specialty    String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  appointments Appointment[]
  availability ProfessionalAvailability?
}

model ProfessionalAvailability {
  id             Int          @id @default(autoincrement())
  startDate      DateTime
  endDate        DateTime
  startTime      String
  endTime        String
  professionalId Int          @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  professional   Professional @relation(fields: [professionalId], references: [id], onDelete: Cascade)
}

model Client {
  id             Int           @id @default(autoincrement())
  name           String
  email          String?
  phone          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  medicalHistory String?
  appointments   Appointment[]
  sales          Sale[]
}

model Appointment {
  id             Int           @id @default(autoincrement())
  date           DateTime
  time           String
  status         String
  professionalId Int?
  treatmentId    Int?
  clientId       Int?
  box            String
  deposit        Int           @default(0)
  price          Int
  notes          String?
  duration       Int?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  client         Client?       @relation(fields: [clientId], references: [id])
  professional   Professional? @relation(fields: [professionalId], references: [id])
  treatment      Treatment?    @relation(fields: [treatmentId], references: [id])
  sales          Sale[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  category    String?
  brand       String?
  code        String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  saleItems   SaleItem[]
}

model PaymentMethod {
  id          Int      @id @default(autoincrement())
  name        String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]
}

model Sale {
  id            Int       @id @default(autoincrement())
  date          DateTime  @default(now())
  clientId      Int?
  appointmentId Int?
  total         Float
  status        String    // pending, completed, cancelled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  client        Client?   @relation(fields: [clientId], references: [id])
  appointment   Appointment? @relation(fields: [appointmentId], references: [id])
  items         SaleItem[]
  payments      Payment[]
}

model SaleItem {
  id          Int      @id @default(autoincrement())
  saleId      Int
  productId   Int?
  treatmentId Int?
  quantity    Int
  price       Float
  subtotal    Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sale        Sale     @relation(fields: [saleId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
  treatment   Treatment? @relation(fields: [treatmentId], references: [id])
}

model Payment {
  id              Int           @id @default(autoincrement())
  saleId          Int
  paymentMethodId Int
  amount          Float
  reference       String?       // Para números de transacción, etc.
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  sale            Sale          @relation(fields: [saleId], references: [id])
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
}

model Expense {
  id            Int      @id @default(autoincrement())
  description   String
  amount        Float
  date          DateTime
  category      String
  paymentMethod String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  OPERATOR
  READONLY
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  name          String
  email         String?   @unique
  role          UserRole  @default(OPERATOR)
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
